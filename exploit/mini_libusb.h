#ifndef _MINI_LIBUSB_H_
#define _MINI_LIBUSB_H_

#include <fcntl.h>
#include <linux/usbdevice_fs.h>
#include <sys/ioctl.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/stat.h>
#include <unistd.h>
#include <dirent.h>
#include <ctype.h>
#include <stdint.h>
#include "mini_libusb.h"

#define BOOTROM_USB_BUF_1       0x40004000
#define BOOTROM_USB_BUF_2       0x40008000
#define BOOTROM_SMASH_TARGET    0x4000DCD8
#define BOOTROM_SMASH_LEN       (BOOTROM_SMASH_TARGET - BOOTROM_USB_BUF_2)

#define USB_CTRL_DEVICE_ENDPOINT_TO_HOST 0x82
#define USB_CTRL_GET_STATUS 0x00
// #define USB_CTRL_GET_STATUS_LENGTH 0x1000
#define USB_CTRL_GET_STATUS_LENGTH BOOTROM_SMASH_LEN


#define USB_BULK_TIMEOUT 500
#define SYSFS_MOUNT_PATH	"/sys"
#define SYSFS_DEVICE_PATH	SYSFS_MOUNT_PATH "/bus/usb/devices"

struct setup_data {
	uint8_t bRequestType;
	uint8_t bRequest;
	uint16_t wValue;
	uint16_t wIndex;
	uint16_t wLength;
	uint8_t data[USB_CTRL_GET_STATUS_LENGTH];
};

int open_RCM_usb( uint16_t vid, uint16_t pid );
int send_bulk_txn( int fd, uint32_t ep, uint32_t len, void *data );
int send_control_txn( int fd, uint32_t bRequestType, uint32_t bRequest, uint32_t len, void *data );

#endif

